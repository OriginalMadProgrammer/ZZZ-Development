# src.cfg -- configuration file for all "src..." operations
#     1993 by Gilbert Healton (based on 1985 scripts, which is why it is csh)
#	@(#)src.cfg	1.2 20 Mar 1997 17:36:50

use strict;

package Src::Config;

use POSIX;

use Getopt::Long;

require "stdlib.ph";

use vars qw( $VERSION @EXPORT );

my @c = ();

#######################################################################
#
#   Early Settings
#
	push ( @c, '$HOME' );
my $HOME = $ENV{'HOME'};

	push ( @c, '%types' );
my %types = 
   (
      # key    command    adir    prefix   suffix    editsuffix  args
	"0" => [ 'rcs',  'RCS',   "",       ",v"      undef,      ""  ],
	"1" => [ 'sccs', 'SCCS',  "s.",     "",       "p.",       ""  ],
	"c" => [ 'cvs',  'CVS',   undef,    undef,    undef,      ""  ],
	"v" => [ 'svn',  '.svn',  undef,    undef,    undef,      ""  ],
      # "X" =>  reserved for "termine at run time"
   );
	# NOTE: undef in prefix/suffix values indicate there are
	# no corresponding files in this "adir" (e.g., adir is
	# only a control directory, not an archive directory).

	push( @c, qw( $types_command $types_adir ) );
	              $types_prefix  $types_suffix $types_editsuffix
		      $types_args ) );
my $types_n = 0;
my $types_command    = $types_n++;
my $types_adir       = $types_n++;
my $types_prefix     = $types_n++;
my $types_suffix     = $types_n++;
my $types_editsuffix = $types_n++;
my $types_args       = $types_n++;

	push( @c, '$pwd' );
my $pwd = getcwd;

$ENV{'SRC_NEST'} = (
		    exists( $ENV{'SRC_NEST'} ) 
			?  $ENV{'SRC_NEST'}
			:  0
		   ) + 1;


#######################################################################
#
#   SHELL PROCEDURAL FUNCTIONS
#
sub echo
{
    my $text = join( " ", @_ );
    $text =~ s/[ \t]*\r?\n?$//;
    return
      print STDOUT $text, "\n";
}

sub debug
{
    my ( 
    	$level,
	@text ) = @_;

    if ( length($DebugSw) >= $level )
    {
	print STDERR "  ", ( "+" x $level ), " ", join( " ", @text ), "\n";
    }

    return 1;
}

#######################################################################
#
#  Command Line Settings
#

	push ( @c, '$ArgK' );
my $ArgK = "";

	push ( @c, '$ArgRev' );
my $ArgRev = "";


	push ( @c, '$SccsSw' );
my $SccsSw = "X";	#indicates the type of source control to use

	push ( @c, '$UpSave' );
my $UpSave = "$HOME/tmp/tmp";  #dir to save applied ".up" files in

	push ( @c, '$DebugSw' );
my $DebugSw = "";		#"" for normal operations. '+' debug level.

	push ( @c, '$DebugSw' );
my $VerboseSw = 0;		#0 for normal operations, 1 for verbose

	push ( @c, '$tarSuffix' );
my $tarSuffix = ".tar.gz";



#######################################################################
#
#   Public Object Methods
#

	push( @EXPORT, '&src_warn' );
sub src_warn {
    my $proto = shift;
    my $text = join( " ", @_ );
    $text =~ s/\s*$//m;		#super-duper chomp
    print STDERR $text, "\n";	#warning text to stdout
    return undef;
}


	push( @EXPORT, '&src_die' );
sub src_die {
    &src_warn;
    exit EXIT_FAILURE;
}



#######################################################################
#
#   Settings Depending On Archive System
#

my $ARCHIVE   = $types{$SccsSw}[$types_adir];
my $ARprefix  = $types{$SccsSw}[$types_prefix];
my $ARsuffix  = $types{$SccsSw}[$types_suffix];
my $AReditfix = $types{$SccsSw}[$types_editsuffix];
my $sArgs     = $types{$SccsSw}[$types_args];


#######################################################################
#
#   Setting Dependent On Command Line Options (set in new)
#
	push( @c, qw( $NestVerbose NestDebug );
my $NestVerbose = "";
my $NestDebug   = "";


#######################################################################
#
#   Object Attributes Set From "new" Arguments
#
	push( @c, qw( $Mode ) );
my $Mode = undef;


#######################################################################
#
#   DEFINE ACCESSORS FOR ALL ATTRIBUTES/METHODS IN @c
#
{
    my $eval = "";
    foreach my $c ( @c )
    {
	( my $sub = $c ) =~ s/^\W//;
	$eval .= "sub $sub { return $c; }\n";
    }

    foreach my $t ( keys %types )
    {
	my $sub = $types{$t}[0];
	$eval .= "sub type_$sub { return '$t'} }\n";
	$eval .= "sub is_$sub { return \$SccsSw eq '$t' }\n";
    }
    local $@;
    eval $eval;
    src_die ( $@ ) if $@;
}



#######################################################################
#
#  Constructor (also processes command line arguments)
#
my $new_sw = 0;

sub new
{
    my (
    	$proto,
	%args,
	) = @_;

    if ( $new_sw++ )
    {
	Src::Config->src_die( 
		"ONLY ONE new Src::Config ALLOWED IN EXECUTION" );
    }

    my $class = ref $proto ? ref $proto : $proto;

    my ($package, $filename, $line, @rest ) = caller(0);

    my $object = "$filename($line)";

    $Mode = $args{'Mode'} if exists $args{'Mode'};

    bless $object, $class;

    Getopt::Long::Configure( "bundling" );	#allow short switches
    GetOptions(
		    'k++'	=> \$ArgK,
		    'r=s'	=> \$ArgRev,
		    'v++'	=> \$VerboseSw,
		    'V++'	=> \$verbose,
		    'z' 	=> sub { $DebugSw .= "+" },

		    'save=s' => \$UpSave,

	    ) || Src::Config->src_die( "INVALID COMMAND LINE OPTIONS\n" );

    $NestVerbose = " -v" if $VerboseSw;
    $NestDebug   = " -z" if $DebugSw;

    if ( length $UpSave ) 
    {
	if ( ! -d $UpSave )
	{
	    $Src::Config->src_die(
		qq(DIR TO SAVE UPDATES IN, "$UpSave", DOES NOT EXIST) );
	}
    }

    if ( $SccsSw eq "X"  ||  $SccsSw eq "x" )
    {   #dynamic configuration
	foreach my $t ( keys $types )
	{
	    if ( defined  $types{$t}[$types_adir] 
	      && -d $types{$t}[$types_adir] )
	    {
		$SccsSw = $t;
		last;
	    }
	}

	if ( $SccsSw eq "X"  ||  $SccsSw eq "x" ) 
	{
	    Src::Config->src_die( "CAN NOT DETERMINE IF SCCS OR RCS" );
	}
    }

    $DebugSw && debug( 1,  "Mode=$Mode" );

    if ( "$Mode" ne "tar" )
    {   #normal operations
	my $tar_file =  "$ARCHIVE.$tarSuffix";
	if ( -f $tar_file )
	{   #tar archive exists: auto-untar files
	    my $err = system( "srcuntar $tar_file" );
	    $err && $Src::Config::src_die( "UNTAR ERROR ON $tar_file" );
   	}
    }

    return $object;
}

