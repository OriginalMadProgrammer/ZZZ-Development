#! /usr/bin/perl
# SCOPE: rc.user

$Id = "@(#)lspath	1.6 4/1/97 10:53:10";
$RCS = undef;

@PATH= grep( /\S/, split(/\s*:\s*/,$ENV{'PATH'}) );

@morePATH = ( 		#--all option adds these paths to existing $PATH
	### path's stolen directly from vintage `whereis` program
	"/usr/bin",
	"/usr/5bin",
	"/usr/games",
	"/usr/hosts",
	"/usr/include",
	"/usr/local",
	"/usr/etc",
	"/usr/lib",
	"/usr/share/man",
	"/usr/src",
	"/usr/ucb",

	### other paths... add new stuff here (keep "." first!)
	".",			#(also visually marks end of whereis names)
	"/bin",
	"/etc/X11/bin",
	"/etc/X11R6/bin",
	"/usr/contrib/bin",
	"/usr/man",
	"/usr/X11/bin",
	"/usr/X11R6/bin",
	"/usr/lib/lp",
	"/usr/local/bin",
	"/usr/man",
	"/usr/sbin",
	"/usr/share",
	"/usr/share/bin",

	### solaris systems - path's unique to solaris systems
	"/usr/openwin/bin",
	"/usr/X/bin",

  	    );


$ls = "ls ";

# parse arguments
while( $ARGV[0] =~ m/^--?[a-zA-Z0-9]/ )
{
    if ( $ARGV[0] eq "--man" )
    {
	&ManPage;
    }
    elsif ( $ARGV[0] eq "--all" )
    {   #search all commonly used places for files
	local($d);
	foreach $d ( @morePATH )
	{   #push onto @PATH any directories in @morePATH that are NOT duplicate
	    push( @PATH, $d ) if ( ( ! grep { $_ eq $d } @PATH )  &&  -d $d );
	}
    }
    else
    {
	$ls .= " $ARGV[0]";
    }
    shift @ARGV;
}


if( @ARGV == 0 )
{
    print STDERR "NO NAMES GIVEN TO SEARCH\n";
    exit(1);
}

{   #fix common problems in $ENV{'PATH'} members
    $PWD = $ENV{'PWD'};
    for ( $p = 0; $p < @PATH; $p++ )
    {   #fix up common problems in $ENV{'PATH'} members
	$_ = $PATH[$p];
	s"//+""g;			#strip redundant slashes
	$_ = $PWD if $_ eq ".";		#watch for local dir
	s"^\./"$PWD/";			#expand current directory
	s"^([^/])"$PWD/$1";		#relative paths to absolute
	while( s"/([^/]+)/\.\./"" )
	{  #eat up any ".." 
	}
	$PATH[$p] = $_;		#put it back
    }
}

{   #cull PATH for duplicate names
    local(@Tmp,%Tmp);

    grep { s"/+$"" } @PATH;		#remove redundant trailing /'s
    	 ### DO NOT SORT: keep PATH order

    @Tmp = grep{ $Tmp{$_}++ == 0 } @PATH;	#find unique names

    @PATH = @Tmp;			#keep just unique names
}

{   #determine which directories are physcially present
    local(@PathsUnique,%PathCache);
    while( @PATH )
    {
	$_ = shift @PATH;
	next if $_ eq '';
	next if defined $PathCache{$_};

	local(@Stat) = stat $_;		#attempt the stat

	$PathCache{$_} = @Stat ? scalar( @Stat ) : 0;	#remember if found

	next unless @Stat;	#not found: ignore directory
	next unless -d $_;	

	push( @PathsUnique, $_ );	#push good entry back onto queue
    }

    @PATH = @PathsUnique;
    		#NOTE: this preserves the original PATH order, 
		##just dropping invalid entries

    @PATH || die "NO PATHs TO SEARCH\n";
}



{   # figure out what file system each directory belongs on
	#  if deleting duplicate by I-node numbers (would like to do),
	#  ##must keep I-node numbers relative to file system.
    $_ = "df -k " . join( " ", @PATH );
    open( DF, "$_ |" )
    		|| die "CAN NOT execute \`df\`: $!\n";
    local(@DF) = <DF>;
    close(DF);

       #  Solaris: Filesystem   kbytes    used  avail   capacity  Mounted on
       #  Linux:   Filesystem   1K-blocks Used Available Use%     Mounted on
    my $header = 'Filesystem    1K-blocks   Used Available Use% Mounted on';
    my @header;
    if ( @DF && $DF[0] !~ m"/" )	#capture any header
    {
	$header = shift @DF 
    }
    $header =~ s/Mounted on/Mounted/;
    @header = grep( /./, split( /\s+/, $header ) );
    my %header = ( FileSystem => 0,  Mount => $#header );

    # figure out file systems for each directory, discarding duplicates
    %FileSystem = ();
    local(@tmpPATH) = @PATH;
    while( @DF )
    {    #determine file system for each file
	 @tmpPATH  ||  die "BUG";		#expect one-for-one match
	 local($Dir) = shift @tmpPATH;	#get corrsponding directory name
	 $_ = shift( @DF );
	 while ( @DF && $DF[0] =~ /^\s/ &&
		( my @df = split( /\s+/, $_ ) ) < @header )
	 {   #next line is continued line
	    $_ =~ s/\s+$//;
	    $_ .= shift( @DF );	
	 }

	 my @df = split( /\s+/, $_ );
	 my $df_FileSystem = $df[$header{'FileSystem'}];
	 my $df_Mount      = $df[$header{'Mount'}];

	 $FileSystem{$df_Mount} = 	#keep this for our records
		     $df_FileSystem;
	 $FileSystem{$Dir} = $df_FileSystem; #map dir in PATH to FS
    }

    ( @tmpPATH  ||  @DF ) && die "BUG";	#expect one-for-one match
}

{   #do the actual searches
    local(@Matches);
    local(%Hits);
    foreach $arg ( @ARGV )
    {
	$arg =~ s"//+""g;			#strip redundant slashes
	$arg = $PWD if $arg eq ".";		#watch for local dir
	$arg =~ s"^\./"$PWD/";		#expand current directory
	while( $arg =~ s"/([^/]+)/\.\./"" )
	{
	}
	local($pathx) = join( "/$arg ", @PATH ) . "/$arg";
	$_ = "ls -d $pathx 2>/dev/null";
	if (open( LS, "$_ |"))
	{   # pipe opened 
	    local($Arg) = $arg;
	    $Arg =~ s/\./\\./g;	# convert file name wild card to perl regxp
	    $Arg =~ s/\+/\\+/g;
	    $Arg =~ s/\*/.*/g;
	    $Arg =~ s/\?/./g;

	    while( <LS> )
	    {
	       next if /^total/;
	       next if /not found *$/;
	       if ( /^\S+:\s*$/ )
	       {
		  next;
	       }

	       next unless m"/$Arg\s*$"; #must match entry in path
	       s/\s*$//;
	       next if $Hits{$_};

	       ### have a name that matches current entry
	       $Hits{$_} = 1;
	       push( @Matches, $_ );
	    }
	    close(LS);
	}
    }

    system( "$ls -d " . join( " ", @Matches ) ) if @Matches;

}

exit(0);


########################################################################

sub ManPage
{
    if ( $RCS )
    {
	@Id = split( /\s+/, $Id );		#split into fields

	print ".\n";
	print ".ds 7i $Id\n";
	print ".ds 7d ", $Id[3], "\n";	#revision date
	print ".ds 7r ", $Id[2], "\n";	#revision
	print ".\n";
    }
    else
    {
	## @(#)termcap.src 1.33 89/03/22 SMI; from UCB 5.28 6/7/86
	@Id = split( /\s+/, $Id );		#split into fields

	print ".\n";
	print ".ds 7i $Id\n";
	print ".ds 7d ", $Id[2], "\n";	#revision date
	print ".ds 7r ", $Id[3], "\n";	#revision
	print ".\n";
    }
    print ".de 7w\n\\\&", 
    	join( "\n.br\n\\\&", @morePATH ), "\n..\n";

    while( <DATA> )
    {
	print $_;
    }
    exit(0);
}


#end: pather
__END__
.\"       _____                  __________                        
.\"      /     \ _____    ____   \______   \_____     ____   ____  
.\"     /  \ /  \\__  \  /    \   |     ___/\__  \   / ___\_/ __ \ 
.\"    /    Y    \/ __ \|   |  \  |    |     / __ \_/ /_/  >  ___/ 
.\"    \____|__  (____  /___|  /  |____|    (____  /\___  / \___  >
.\"            \/     \/     \/                  \//_____/      \/ 
.\"
.
.TH lspath 1 \*(7d "Mad Programmer Software" "Free Software"
.SH NAME
lspath \- list directories on PATH where a file exists.
.
.SH SYNOPSIS
\0\fBlspath\fP [\fB\-\-man\fP] [\fB\--all\fP] [\fB\-xxx\fP] files
.
.
.SH DESCRIPTION
Searches the standard PATH for all matching files,
executable or not.
Matching files are listed in the style of the \fBls\fP(1) command.
.LP
While the file name wild cards of "*?[]" are supported,
wild carded names must be quoted on the command line if the shell reading
the command is not to expand the wild cards.
.
.
.
.SH OPTIONS
Most \fBls\fP(1) options are supported.
A \fB\-d\fP is always passed to \fBls\fP(1) 
to ensure matching directory names are listed rather than 
the contents of those directories.
.LP
\fB\-\-all\fP extends the setting of \fBPATH\fP to search in 
directories executables are often stored on in different systems.
This follows the concept of the \fBwhereis\fP(1) command, 
but with additional directories.
The current additional directories are
.RS
.LP
.7w
.RE
.LP
NOTE: only directories not already in PATH are added to the search path.
The actual value of the PATH environment variable is not altered.
.
.LP
\fB\-\-man\fP prints this manual page in unformatted
roff output.
No other output is made.
.nf
.LP
   lspath \-\-man | nroff \-man | more \-s
.fi
.
.
.
.SH ENVIRONMENT
The PATH environment is used to determine what files to list.
Only entries whose first character is "/" are searched.
.
.
.
.SH SEE ALSO
\fBls(1)\fP,
\fBperl(1)\fP
.
.
.
.
.\"end: lspath

